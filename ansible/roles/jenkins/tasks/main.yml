---
- name: Install OpenJDK 17
  apt:
    name: openjdk-17-jdk
    state: present
    update_cache: yes

- name: Set JAVA_HOME and PATH
  copy:
    dest: /etc/profile.d/java.sh
    content: |
      export JAVA_HOME=$(dirname $(dirname $(readlink $(readlink $(which java)))))
      export PATH=$PATH:$JAVA_HOME/bin
    owner: root
    group: root
    mode: '0644'

- name: Source Java environment
  shell: source /etc/profile.d/java.sh
  args:
    executable: /bin/bash

- name: Add Jenkins key
  shell: curl -fsSL https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key | tee /usr/share/keyrings/jenkins-keyring.asc
  args:
    creates: /usr/share/keyrings/jenkins-keyring.asc

- name: Add Jenkins repository
  copy:
    dest: /etc/apt/sources.list.d/jenkins.list
    content: |
      deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] https://pkg.jenkins.io/debian-stable binary/
    owner: root
    group: root
    mode: '0644'
    force: no

- name: Add Kubernetes APT repository key
  block:
  - name: Download Kubernetes repository GPG key
    ansible.builtin.get_url:
      url: https://pkgs.k8s.io/core:/stable:/v1.32/deb/Release.key
      dest: /tmp/kubernetes-release.key
      mode: '0644'

  - name: Dearmor GPG key
    ansible.builtin.shell:
      cmd: gpg --dearmor < /tmp/kubernetes-release.key > /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    args:
      creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg

  - name: Set correct permissions on keyring
    ansible.builtin.file:
      path: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
      mode: '0644'
      owner: root
      group: root
  become: true

- name: Add Kubernetes APT repository
  block:
  - name: Configure Kubernetes repository source list
    ansible.builtin.copy:
      content: 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.32/deb/ /'
      dest: /etc/apt/sources.list.d/kubernetes.list
      owner: root
      group: root
      mode: '0644'
  become: true

- name: Install kubectl
  apt:
    name: kubectl
    update_cache: true

- name: Import the Google Cloud Platform public key
  apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    state: present

- name: Add the Cloud SDK distribution URI as a package source
  apt_repository:
    repo: 'deb https://packages.cloud.google.com/apt cloud-sdk main'
    state: present

- name: Install packages needed for gcloud CLI
  apt:
    name:
      - google-cloud-cli
      - google-cloud-cli-gke-gcloud-auth-plugin
      - google-cloud-cli-kubectl-oidc
    update_cache: true

- name: Export GOOGLE_APPLICATION_CREDENTIALS environment variable
  lineinfile:
    path: /etc/profile.d/google-cloud.sh
    line: "export GOOGLE_APPLICATION_CREDENTIALS=/var/lib/jenkins/jenkins-sa-key.json"
    create: yes
    mode: '0644'

- name: Reload the profile to apply environment variable change
  shell: source /etc/profile.d/google-cloud.sh
  args:
    executable: /bin/bash

- name: Install Docker
  apt:
    name: docker.io
    state: present
    update_cache: yes

- name: Add Jenkins user to Docker group
  user:
    name: jenkins
    groups: docker
    append: yes

- name: Create directory for Jenkins override configuration
  become: true
  file:
    path: /etc/systemd/system/jenkins.service.d
    state: directory
    owner: root
    group: root
    mode: '0755'

- name: Upload new jenkins service
  become: true
  template:
    src: ../files/override.conf.j2
    dest: /etc/systemd/system/jenkins.service.d/override.conf
    mode: 600

- name: Install Jenkins
  apt:
    name: jenkins
    state: latest
    update_cache: yes

- name: Add JCASC directory
  file:
    path: '/var/lib/jenkins/casc_configs'
    state: directory
  become: true

- name: Copy Docker Images to Jenkins
  copy:
    src: ../../../../images/
    dest: /var/lib/jenkins/images/
    owner: jenkins
    group: jenkins
    mode: '0755'
  become: true

- name: Copy Kubernetes Files to Jenkins
  copy:
    src: ../../../../kubernetes/
    dest: /var/lib/jenkins/kubernetes/
    owner: jenkins
    group: jenkins
    mode: '0755'
  become: true

- name: Copy Deployment Pipeline to Jenkins
  copy:
    src: ../files/deployment_pipeline/
    dest: /var/lib/jenkins/deployment_pipeline/
    owner: jenkins
    group: jenkins
    mode: '0755'
  become: true

- name: Set Permissions for Deployment Pipeline
  file:
    path: /var/lib/jenkins/deployment_pipeline/main.py
    owner: jenkins
    group: jenkins
    mode: '0755'
  become: true

- name: Copy jobs to Jenkins
  copy:
    src: ../files/jobs/
    dest: /var/lib/jenkins/casc_configs/jobs/
    owner: jenkins
    group: jenkins
    mode: '0755'
  become: true

- name: Copy Jenkins SA Key
  copy:
    src: ../files/jenkins-sa-key.json
    dest: /var/lib/jenkins/jenkins-sa-key.json
    owner: jenkins
    group: jenkins
    mode: '0600'

- name: Load environment variables from .env file
  set_fact:
    jenkins_admin_password: "{{ lookup('ansible.builtin.env', 'JENKINS_ADMIN_PASSWORD') | default('') }}"

- name: Ensure password is defined
  assert:
    that:
    - jenkins_admin_password != ''
    fail_msg: "JENKINS_ADMIN_PASSWORD is not defined in .env file"
    success_msg: "Password is set"

- name: Copy JCASC Config template
  template:
    src: ../files/jenkins_config.yaml.j2
    dest: /var/lib/jenkins/casc_configs/jenkins_config.yaml
    mode: '0644'
  become: true

- name: Start Jenkins service
  systemd:
    name: jenkins
    state: started
  become: true

- name: Install Jenkins plugins
  community.general.jenkins_plugin:
    name: "{{ item }}"
    url: "http://{{ jenkins_vm_ip }}:{{ jenkins_port }}"
    url_username: "Admin"
    url_password: "{{ jenkins_admin_password }}"
    state: latest
    timeout: 120
  loop:
  - job-dsl
  - configuration-as-code
  - github
  - role-strategy
  register: plugin_result
  failed_when: false

- name: Reload Jenkins service
  systemd:
    name: jenkins
    state: restarted
    daemon_reload: true

- name: Set bash as jenkins shell
  become: true
  user:
    name: jenkins
    shell: /bin/bash
